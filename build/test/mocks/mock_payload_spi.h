/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_PAYLOAD_SPI_H
#define _MOCK_PAYLOAD_SPI_H

#include "payload_spi.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_payload_spi_Init(void);
void mock_payload_spi_Destroy(void);
void mock_payload_spi_Verify(void);




#define trinamicSetOperacion_IgnoreAndReturn(cmock_retval) trinamicSetOperacion_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void trinamicSetOperacion_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define trinamicSetOperacion_ExpectAndReturn(operacion, cmock_retval) trinamicSetOperacion_CMockExpectAndReturn(__LINE__, operacion, cmock_retval)
void trinamicSetOperacion_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, trinamicOperacion_t operacion, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_trinamicSetOperacion_CALLBACK)(trinamicOperacion_t operacion, int cmock_num_calls);
void trinamicSetOperacion_StubWithCallback(CMOCK_trinamicSetOperacion_CALLBACK Callback);
#define trinamicSetRegistro_IgnoreAndReturn(cmock_retval) trinamicSetRegistro_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void trinamicSetRegistro_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define trinamicSetRegistro_ExpectAndReturn(registro, cmock_retval) trinamicSetRegistro_CMockExpectAndReturn(__LINE__, registro, cmock_retval)
void trinamicSetRegistro_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, trinamicRegistro_t registro, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_trinamicSetRegistro_CALLBACK)(trinamicRegistro_t registro, int cmock_num_calls);
void trinamicSetRegistro_StubWithCallback(CMOCK_trinamicSetRegistro_CALLBACK Callback);
#define trinamicsetOperacionRegistroEscritura_IgnoreAndReturn(cmock_retval) trinamicsetOperacionRegistroEscritura_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void trinamicsetOperacionRegistroEscritura_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define trinamicsetOperacionRegistroEscritura_ExpectAndReturn(operacion, registro, cmock_retval) trinamicsetOperacionRegistroEscritura_CMockExpectAndReturn(__LINE__, operacion, registro, cmock_retval)
void trinamicsetOperacionRegistroEscritura_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, trinamicOperacion_t operacion, trinamicRegistro_t registro, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_trinamicsetOperacionRegistroEscritura_CALLBACK)(trinamicOperacion_t operacion, trinamicRegistro_t registro, int cmock_num_calls);
void trinamicsetOperacionRegistroEscritura_StubWithCallback(CMOCK_trinamicsetOperacionRegistroEscritura_CALLBACK Callback);
#define trinamicArmarDatagrama_Ignore() trinamicArmarDatagrama_CMockIgnore()
void trinamicArmarDatagrama_CMockIgnore(void);
#define trinamicArmarDatagrama_Expect(datagrama, operacionregistro, valor) trinamicArmarDatagrama_CMockExpect(__LINE__, datagrama, operacionregistro, valor)
void trinamicArmarDatagrama_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* datagrama, uint8_t operacionregistro, uint32_t valor);
typedef void (* CMOCK_trinamicArmarDatagrama_CALLBACK)(uint8_t* datagrama, uint8_t operacionregistro, uint32_t valor, int cmock_num_calls);
void trinamicArmarDatagrama_StubWithCallback(CMOCK_trinamicArmarDatagrama_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
